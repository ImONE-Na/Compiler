name: Build OSS Kernel for Redmi Note 9 Pro (Curtana)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Add permissions for artifact upload
permissions:
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the kernel source
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: MiCode/Xiaomi_Kernel_OpenSource
          ref: curtana-q-oss
          fetch-depth: 1

      # Debug step to check if runner picks up
      - name: Debug Runner
        run: echo "Runner is working! This is ubuntu-latest."

      # Set up ccache to speed up compilation
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-curtana-${{ github.sha }}
          max-size: 5G

      # Add repository for GCC 7 and install dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          # Add Ubuntu Toolchain Test Builds PPA for GCC 7
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y git bc bash coreutils diffutils findutils \
            g++-7 gcc-7 gcc-7-multilib g++-7-multilib \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
            make python3 flex bison libssl-dev \
            libncurses5-dev libncursesw5-dev zip
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 100
          sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-gcc-7 100
          sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-g++ aarch64-linux-gnu-g++ /usr/bin/aarch64-linux-gnu-g++-7 100
          sudo update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-7 100
          sudo update-alternatives --install /usr/bin/arm-linux-gnueabihf-g++ arm-linux-gnueabihf-g++ /usr/bin/arm-linux-gnueabihf-g++-7 100

      # Set up environment variables
      - name: Set Environment Variables
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM32=arm-linux-gnueabihf-" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=MINHAZ" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=POTATO" >> $GITHUB_ENV
          echo "CC=ccache gcc" >> $GITHUB_ENV
          echo "CXX=ccache g++" >> $GITHUB_ENV

      # Create out directory if it doesn't exist
      - name: Create Output Directory
        run: |
          if [ ! -d "out" ]; then
            mkdir out
          fi

      # Compile defconfig
      - name: Generate Defconfig
        run: |
          make O=out vendor/atoll-perf_defconfig

      # Compile kernel
      - name: Compile Kernel
        run: |
          make -j$(nproc) O=out CC="${CC}" CXX="${CXX}" \
            ARCH=${ARCH} SUBARCH=${SUBARCH} \
            CROSS_COMPILE=${CROSS_COMPILE} \
            CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32} \
            2>&1 | tee kernel.log

      # Compile and install modules
      - name: Compile and Install Modules
        run: |
          make -j$(nproc) O=out CC="${CC}" CXX="${CXX}" \
            ARCH=${ARCH} SUBARCH=${SUBARCH} \
            CROSS_COMPILE=${CROSS_COMPILE} \
            CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32} \
            INSTALL_MOD_PATH=out modules_install

      # Checkout AnyKernel3
      - name: Checkout AnyKernel3
        uses: actions/checkout@v4
        with:
          repository: ImONE-Na/AnyKernel3
          ref: master
          path: AnyKernel3

      # Customize AnyKernel3
      - name: Customize AnyKernel3
        run: |
          sed -i 's/kernel.compiler=.*/kernel.compiler=GCC 7/' AnyKernel3/anykernel.sh
          sed -i 's/kernel.version=.*/kernel.version=4.14.117/' AnyKernel3/anykernel.sh

      # Copy kernel image, dtb, dtbo, and modules to AnyKernel3
      - name: Copy Files to AnyKernel3
        run: |
          cp out/arch/arm64/boot/Image.gz AnyKernel3/
          cp out/arch/arm64/boot/dtbo.img AnyKernel3/ || true
          cp out/arch/arm64/boot/dtb.img AnyKernel3/ || true
          mkdir -p AnyKernel3/modules
          find out/lib/modules -type f -name "*.ko" -exec cp {} AnyKernel3/modules/ \;

      # Create flashable zip
      - name: Create Flashable Zip
        working-directory: AnyKernel3
        run: |
          zip -r9 ../OSS-Kernel-Curtana.zip * -x .git README.md *placeholder

      # Upload artifact
      - name: Upload Flashable Zip as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OSS-Kernel-Curtana
          path: OSS-Kernel-Curtana.zip
          retention-days: 7
