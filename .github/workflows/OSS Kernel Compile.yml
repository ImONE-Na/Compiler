# This is a GitHub Actions workflow to build the OOS kernel for Redmi Note 9 Pro (curtana)

name: Build OSS Kernel for Curtana

# This workflow is triggered on pushes to the main branch and can also be run manually
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    # Step 1: Install essential dependencies for building the kernel
    - name: Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev libtinfo5

    # Step 2: Checkout the kernel source code
    - name: Checkout Kernel Source
      uses: actions/checkout@v3
      with:
        path: 'kernel'
        repository: 'MiCode/Xiaomi_Kernel_OpenSource'
        ref: 'curtana-q-oss'

    # Step 3: Checkout Proton Clang compiler
    - name: Checkout Proton Clang
      uses: actions/checkout@v3
      with:
        path: 'clang'
        repository: 'kdrag0n/proton-clang'
        ref: 'master'

    # Step 4: Setup ccache for faster builds
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: 5G # Set ccache size to 5GB

    # Step 5: Set up environment variables
    - name: Set Environment Variables
      run: |
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "SUBARCH=arm64" >> $GITHUB_ENV
        echo "KBUILD_BUILD_USER=MINHAZ" >> $GITHUB_ENV
        echo "KBUILD_BUILD_HOST=POTATO" >> $GITHUB_ENV
        echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
        echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
        echo "CROSS_COMPILE_ARM32=arm-linux-gnueabi-" >> $GITHUB_ENV
        echo "PATH=${{ github.workspace }}/clang/bin:${{ github.workspace }}/clang/bin:${PATH}" >> $GITHUB_ENV

    # Step 6: Build the kernel
    - name: Build Kernel
      working-directory: ./kernel
      run: |
        # Create the output directory if it doesn't exist
        mkdir -p out

        # Configure the kernel
        make O=out vendor/atoll-perf_defconfig CC="ccache clang" CXX="ccache clang"

        # Build the kernel
        make -j$(nproc --all) O=out CC="ccache clang" CXX="ccache clang"

    # Step 7: Build kernel modules
    - name: Build Modules
      working-directory: ./kernel
      run: |
        make O=out modules_install INSTALL_MOD_PATH=../modules_out

    # Step 8: Checkout AnyKernel3
    - name: Checkout AnyKernel3
      uses: actions/checkout@v3
      with:
        path: 'AnyKernel3'
        repository: 'ImONE-Na/AnyKernel3'
        ref: 'master'

    # Step 9: Prepare for packaging
    - name: Prepare for Packaging
      run: |
        # Get Proton Clang version
        CLANG_VERSION=$(./clang/bin/clang --version | head -n 1)

        # Customize anykernel.sh
        sed -i 's/kernel.string=.*/kernel.string=OSS Kernel by MINHAZ/' AnyKernel3/anykernel.sh
        sed -i "s/kernel.compiler=.*/kernel.compiler=${CLANG_VERSION}/" AnyKernel3/anykernel.sh
        sed -i 's/kernel.version=.*/kernel.version=4.14.117/' AnyKernel3/anykernel.sh

        # Copy compiled files to AnyKernel3 directory
        cp kernel/out/arch/arm64/boot/Image.gz AnyKernel3/
        cp kernel/out/arch/arm64/boot/dtbo.img AnyKernel3/
        cp kernel/out/arch/arm64/boot/dts/vendor/qcom/atoll-sm6125-idp.dtb AnyKernel3/dtb

        # Copy modules
        find modules_out/lib/modules -type f -name '*.ko' -exec cp {} AnyKernel3/modules/vendor/lib/modules/ \;

    # Step 10: Create Flashable Zip
    - name: Create Flashable Zip
      working-directory: ./AnyKernel3
      run: |
        zip -r9 ../OSS-Kernel-curtana-$(date +%Y%m%d-%H%M).zip *

    # Step 11: Upload the flashable zip as an artifact
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: OSS-Kernel-curtana
        path: ./*.zip
