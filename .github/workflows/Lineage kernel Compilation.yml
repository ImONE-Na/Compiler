name: Lineage kernel Compilation

on:
  push:
    branches:
      - main # This workflow will trigger on pushes to the 'main' branch

jobs:
  build-kernel:
    name: üèóÔ∏èKernel Building ... # Job name with an emoji
    runs-on: ubuntu-latest # Specifies the operating system for the job

    # Define environment variables that will be used throughout the workflow
    env:
      KBUILD_BUILD_USER: MINHAZ # User name for the kernel build
      KBUILD_BUILD_HOST: POTATO # Host name for the kernel build
      ARCH: arm64 # Architecture for kernel compilation
      SUBARCH: arm64 # Sub-architecture for kernel compilation
      LLVM_TOOLCHAIN_VERSION: 21.1.0-rc1 # Version of the LLVM toolchain to download
      LLVM_TOOLCHAIN_URL: https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ env.LLVM_TOOLCHAIN_VERSION }}/LLVM-${{ env.LLVM_TOOLCHAIN_VERSION}}-Linux-X64.tar.xz # URL for LLVM toolchain
      KERNEL_SOURCE_DIR: android_kernel_xiaomi_sm6250 # Directory name for the kernel source
      ANYKERNEL_DIR: AnyKernel3 # Directory name for the AnyKernel3 repository

    steps:
      # ASCII art cat to start the workflow with some flair!
      - name: üòº
        run: |
          echo " " # Blank echo for spacing
          echo "  /\_/\  "
          echo " ( o.o ) "
          echo "  > ^ <  "
          echo " " # Blank echo for spacing
          echo "Meow! Starting the LineageOS Kernel Compilation Workflow!"
          echo " " # Blank echo for spacing

      - name: üêæ Checking out Kernel Source... # Step to clone the kernel source
        uses: actions/checkout@v4 # Action to check out the repository
        with:
          repository: xiaomi-sm6250-devs/android_kernel_xiaomi_sm6250 # Kernel source repository
          ref: lineage-22.2 # Branch of the kernel source
          path: ${{ env.KERNEL_SOURCE_DIR }} # Path where the kernel source will be cloned
        env:
          # This is sometimes needed for older runners or specific actions, though v4 is generally secure.
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true' 

      - name: ‚ö° Setting up ccache... # Step to configure ccache for faster compilation
        uses: hendrikmuhs/ccache-action@v1.2 # Action for ccache setup
        with:
          key: ${{ github.job }}-${{ github.ref }} # Unique key for cache
          max-size: 5G # Maximum cache size
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

      - name: ‚öôÔ∏è Downloading and Extracting LLVM Clang... # Step to get and set up the compiler
        run: |
          echo " " # Blank echo for spacing
          echo "‚öôÔ∏è Downloading and extracting LLVM Clang toolchain..."
          # Download the LLVM toolchain archive
          wget "${{ env.LLVM_TOOLCHAIN_URL }}" -O llvm.tar.xz
          # Extract the archive
          tar -xf llvm.tar.xz
          
          # Set the path to the extracted LLVM directory
          LLVM_PATH=$(pwd)/LLVM-${{ env.LLVM_TOOLCHAIN_VERSION}}-Linux-X64
          # Export environment variables for subsequent steps
          echo "LLVM_PATH=$LLVM_PATH" >> $GITHUB_ENV
          echo "CROSS_COMPILE=$LLVM_PATH/bin/aarch64-linux-gnu-" >> $GITHUB_ENV # Cross-compile prefix for ARM64
          echo "CROSS_COMPILE_ARM32=$LLVM_PATH/bin/arm-linux-gnueabihf-" >> $GITHUB_ENV # Cross-compile prefix for ARM32
          echo "PATH=$LLVM_PATH/bin:$PATH" >> $GITHUB_ENV # Add LLVM bin to PATH
          
          echo "LLVM Clang setup complete. Verifying paths:"
          echo "LLVM_PATH: $LLVM_PATH"
          echo "CROSS_COMPILE: ${{ env.CROSS_COMPILE }}"
          echo "CROSS_COMPILE_ARM32: ${{ env.CROSS_COMPILE_ARM32 }}"
          echo "PATH: $PATH"
          clang --version # Verify clang installation
          echo " " # Blank echo for spacing

      - name: üõ†Ô∏è Installing Build Dependencies... # Step to install all necessary packages
        run: |
          echo " " # Blank echo for spacing
          echo "üõ†Ô∏è Installing necessary build dependencies..."
          sudo apt update # Update apt package list
          # Install core build tools
          sudo apt install -y build-essential device-tree-compiler ninja-build libsepol-dev
          
          # Add 32-bit architecture support for specific dependencies
          echo "Adding 32-bit architecture and updating apt for 32-bit dependencies..."
          sudo dpkg --add-architecture i386
          sudo apt update
          # Install common 32-bit libraries
          sudo apt install -y libc6:i386 libncurses5:i386 libstdc++6:i386
          
          # Install GNU cross-compilers; often pull in libraries LLVM might implicitly depend on
          echo "Installing GNU cross-compilers for potential library dependencies..."
          sudo apt install -y gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu
          echo "Dependencies installed successfully."
          echo " " # Blank echo for spacing

      - name: üßπ Cleaning Kernel Source... # Step to clean the kernel build directory
        working-directory: ${{ env.KERNEL_SOURCE_DIR }} # Execute commands in the kernel source directory
        run: |
          echo " " # Blank echo for spacing
          echo "üßπ Performing mrproper and clean on kernel source..."
          make O=out mrproper # Deep clean the kernel source tree
          make O=out clean # Clean the build output directory
          echo "Kernel source cleaned."
          echo " " # Blank echo for spacing

      - name: üìù Configuring Kernel... # Step to set up the kernel configuration
        working-directory: ${{ env.KERNEL_SOURCE_DIR }}
        run: |
          echo " " # Blank echo for spacing
          echo "üìù Configuring kernel with miatoll_defconfig..."
          make O=out vendor/xiaomi/miatoll_defconfig # Apply the default configuration
          echo "Kernel configuration complete."
          echo " " # Blank echo for spacing

      - name: üöÄ Compiling Kernel... # Step to compile the kernel
        working-directory: ${{ env.KERNEL_SOURCE_DIR }}
        run: |
          echo " " # Blank echo for spacing
          echo "üöÄ Starting kernel compilation..."
          # Get the clang version to be used in AnyKernel3 script later
          CLANG_VERSION=$(clang --version | head -n 1 | awk '{print $4}')
          echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV # Store clang version as an environment variable
          echo "Using Clang version: $CLANG_VERSION"

          # Compile the kernel using the specified arguments and LLVM toolchain
          make -j$(nproc) O=out \
            ARCH=${{ env.ARCH }} \
            SUBARCH=${{ env.SUBARCH }} \
            CC="ccache clang" \
            CXX="ccache clang++" \
            LD="ld.lld" \
            AR="llvm-ar" \
            NM="llvm-nm" \
            OBJCOPY="llvm-objcopy" \
            OBJDUMP="llvm-objdump" \
            STRIP="llvm-strip" \
            CROSS_COMPILE="${{ env.CROSS_COMPILE }}" \
            CROSS_COMPILE_ARM32="${{ env.CROSS_COMPILE_ARM32 }}" \
            KBUILD_BUILD_USER="${{ env.KBUILD_BUILD_USER }}" \
            KBUILD_BUILD_HOST="${{ env.KBUILD_BUILD_HOST }}"
          echo "Kernel compilation finished!"
          echo " " # Blank echo for spacing

      - name: üì¶ Checking out AnyKernel3... # Step to clone the AnyKernel3 repository
        uses: actions/checkout@v4
        with:
          repository: ImONE-Na/AnyKernel3 # AnyKernel3 repository
          ref: master # Branch of AnyKernel3
          path: ${{ env.ANYKERNEL_DIR }} # Path where AnyKernel3 will be cloned
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

      - name: üìã Copying Kernel Components to AnyKernel3... # Step to move compiled files
        run: |
          echo " " # Blank echo for spacing
          echo "üìã Copying compiled kernel components to AnyKernel3 directory..."
          
          # Copy the main kernel image
          cp "${{ env.KERNEL_SOURCE_DIR }}/out/arch/arm64/boot/Image.gz" "${{ env.ANYKERNEL_DIR }}/"
          echo "Copied Image.gz"

          # Copy dtbo.img if it exists
          if [ -f "${{ env.KERNEL_SOURCE_DIR }}/out/arch/arm64/boot/dtbo.img" ]; then
            cp "${{ env.KERNEL_SOURCE_DIR }}/out/arch/arm64/boot/dtbo.img" "${{ env.ANYKERNEL_DIR }}/"
            echo "Copied dtbo.img"
          else
            echo "dtbo.img not found at expected path, skipping."
          fi

          # Find and copy dtb.img if it exists separately (it might be integrated into Image.gz-dtb)
          DTB_IMG=$(find "${{ env.KERNEL_SOURCE_DIR }}/out" -name "dtb.img" -print -quit)
          if [ -n "$DTB_IMG" ]; then
            cp "$DTB_IMG" "${{ env.ANYKERNEL_DIR }}/"
            echo "Copied dtb.img from: $DTB_IMG"
          else
            echo "dtb.img not found, skipping. It might be integrated into Image.gz-dtb."
          fi

          # Create the modules directory structure within AnyKernel3
          mkdir -p "${{ env.ANYKERNEL_DIR }}/modules/system/lib/modules"
          echo "Created modules directory."

          # Copy all compiled kernel modules (*.ko)
          find "${{ env.KERNEL_SOURCE_DIR }}/out" -name "*.ko" -exec cp {} "${{ env.ANYKERNEL_DIR }}/modules/system/lib/modules/" \;
          echo "Copied kernel modules (*.ko)"
          echo "All necessary components copied."
          echo " " # Blank echo for spacing

      - name: üìù Updating AnyKernel3 Script... # Step to modify anykernel.sh
        working-directory: ${{ env.ANYKERNEL_DIR }}
        run: |
          echo " " # Blank echo for spacing
          echo "üìù Updating anykernel.sh with kernel information..."
          # Use sed with '@' as delimiter to replace strings in anykernel.sh
          sed -i 's@kernel.string=.*@kernel.string=" Lineage Kernel "@g' anykernel.sh
          sed -i 's@kernel.compiler=.*@kernel.compiler="${{ env.CLANG_VERSION }}"@g' anykernel.sh
          sed -i 's@kernel.version=.*@kernel.version=4.14.336@g' anykernel.sh
          echo "anykernel.sh updated."
          echo " " # Blank echo for spacing

      - name: üíæ Creating Flashable Zip... # Step to package the kernel into a flashable zip
        working-directory: ${{ env.ANYKERNEL_DIR }}
        run: |
          echo " " # Blank echo for spacing
          echo "üíæ Creating the flashable AnyKernel3 zip..."
          zip_name="LineageOS-Kernel-${{ env.KBUILD_BUILD_USER }}-${{ github.run_number }}.zip"
          # Create the zip file, excluding the .git directory
          zip -r9 "$zip_name" * -x .git
          mv "$zip_name" ../ # Move the zip to the root of the workspace
          echo "Flashable zip created: $zip_name"
          echo " " # Blank echo for spacing

      - name: ‚¨ÜÔ∏è Uploading Flashable Zip... # Step to upload the zip as an artifact
        uses: actions/upload-artifact@v4 # Action to upload artifacts
        with:
          name: lineage-kernel-zip # Name of the artifact
          path: LineageOS-Kernel-*.zip # Path to the zip file
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          echo " " # Blank echo for spacing
          echo "‚¨ÜÔ∏è Flashable zip uploaded as artifact!"
          echo " " # Blank echo for spacing

      # ASCII art cat to celebrate workflow completion!
      - name: üéâ Workflow Complete!
        run: |
          echo " " # Blank echo for spacing
          echo "  /\_/\  "
          echo " ( =^.^= )"
          echo "  >  U  < "
          echo " " # Blank echo for spacing
          echo "Congratulations! The LineageOS Kernel Compilation Workflow is complete!"
          echo "You can find the flashable zip in the workflow artifacts."
          echo " " # Blank echo for spacing
