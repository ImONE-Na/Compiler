name: Lineage kernel Compilation

on:
  push:
    branches:
      - main

jobs:
  build:
    name: 🏗️Kernel Building ...
    runs-on: ubuntu-latest

    steps:
      - name: 😺 Checking out Kernel Source
        run: |
          cat << "EOF"
             /\_/\
            ( o.o )
             > ^ <
          EOF
          echo "✨ Starting: Checking out the kernel source code..."
          git clone --depth=1 https://github.com/xiaomi-sm6250-devs/android_kernel_xiaomi_sm6250 -b lineage-22.2 kernel
          cd kernel
          echo "✅ Done: Kernel source cloned successfully!"

      - name: 📦 Installing Build Dependencies
        run: |
          cat << "EOF"
             .--.
            |o_o |
            |:_/ |
           //   \\
          EOF
          echo "✨ Starting: Installing necessary build dependencies..."
          sudo apt update
          sudo apt install -y \
            build-essential \
            device-tree-compiler \
            ninja-build \
            libsepol-dev \
            flex \
            bison \
            libssl-dev \
            libncurses-dev \
            libelf-dev \
            unzip \
            xz-utils \
            python3 \
            python3-pip \
            python-is-python3
          
          echo "Adding armhf architecture for 32-bit dependencies..."
          sudo dpkg --add-architecture armhf
          sudo apt update
          sudo apt install -y \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi \
            binutils-aarch64-linux-gnu \
            binutils-arm-linux-gnueabi
          echo "✅ Done: All dependencies installed!"

      - name: ⚡ Setting up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}
          max-size: 5G
          # Ensure ccache is properly configured for the build environment
          # This action automatically sets up ccache and adds it to the PATH.

      - name: 🚀 Setting up LLVM Clang
        run: |
          cat << "EOF"
              /\\_/\\
             ( o.o )
             > ^ <
          EOF
          echo "✨ Starting: Downloading and extracting LLVM Clang..."
          # Navigate into the kernel directory to place LLVM there
          cd kernel
          curl -LSs https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.0-rc1/LLVM-21.1.0-rc1-Linux-X64.tar.xz -o llvm.tar.xz
          tar -xf llvm.tar.xz
          
          # Set environment variables for LLVM
          LLVM_PATH=$(pwd)/LLVM-21.1.0-rc1-Linux-X64
          echo "LLVM_PATH=$LLVM_PATH" >> $GITHUB_ENV
          echo "PATH=$LLVM_PATH/bin:$PATH" >> $GITHUB_ENV
          
          echo "✅ Done: LLVM Clang setup complete!"
          echo "Clang version:"
          clang --version | head -n 1

      - name: 🧹 Cleaning Kernel Source
        run: |
          cat << "EOF"
             /\_/\
            ( X.X )
             > ^ <
          EOF
          echo "✨ Starting: Cleaning kernel source with mrproper and clean..."
          cd kernel
          make mrproper
          make clean
          echo "✅ Done: Kernel source cleaned!"

      - name: ⚙️ Configuring Kernel
        run: |
          cat << "EOF"
             /\_/\
            ( =.= )
             > ^ <
          EOF
          echo "✨ Starting: Configuring kernel with defconfig..."
          cd kernel
          mkdir -p out
          make O=out vendor/xiaomi/miatoll_defconfig
          echo "✅ Done: Kernel configured!"

      - name: 🛠️ Compiling Kernel
        env:
          # User and Host for KBUILD_BUILD_USER and KBUILD_BUILD_HOST
          KBUILD_BUILD_USER: MINHAZ
          KBUILD_BUILD_HOST: POTATO
          # Architecture settings
          ARCH: arm64
          SUBARCH: arm64
          # Cross-compilation prefixes
          CROSS_COMPILE: aarch64-linux-gnu-
          CROSS_COMPILE_ARM32: arm-linux-gnueabi-
        run: |
          cat << "EOF"
             /\_/\
            ( ^.^ )
             > ^ <
          EOF
          echo "✨ Starting: Kernel compilation..."
          cd kernel
          # Compile the kernel using LLVM Clang and ccache
          # LD, AR, NM, OBJCOPY, OBJDUMP, STRIP are set to use LLVM binaries
          make -j$(nproc) O=out \
            CC="ccache clang" CXX="ccache clang++" \
            LD="ld.lld" AR="llvm-ar" NM="llvm-nm" OBJCOPY="llvm-objcopy" OBJDUMP="llvm-objdump" STRIP="llvm-strip"
          echo "✅ Done: Kernel compilation finished!"

      - name: 📦 Checking out AnyKernel3
        run: |
          cat << "EOF"
             /\_/\
            ( o.o )
             > ^ <
          EOF
          echo "✨ Starting: Checking out AnyKernel3 repository..."
          git clone --depth=1 https://github.com/ImONE-Na/AnyKernel3 -b master AnyKernel3
          echo "✅ Done: AnyKernel3 cloned successfully!"

      - name: 📝 Preparing Flashable Zip
        run: |
          cat << "EOF"
             /\_/\
            ( =^.^= )
             > ^ <
          EOF
          echo "✨ Starting: Copying compiled artifacts to AnyKernel3 and modifying anykernel.sh..."
          
          # Navigate into the AnyKernel3 directory
          cd AnyKernel3
          
          # Copy compiled kernel image, dtbo, and dtb
          cp ../kernel/out/arch/arm64/boot/Image.gz .
          cp ../kernel/out/arch/arm64/boot/dtbo.img .
          cp ../kernel/out/arch/arm64/boot/dtb.img .
          
          # Create modules directory and copy all compiled kernel modules (*.ko)
          mkdir -p modules/system/lib/modules
          find ../kernel/out -name "*.ko" -exec cp {} modules/system/lib/modules/ \;
          
          # Get the LLVM Clang version dynamically
          LLVM_VERSION=$(../kernel/LLVM-21.1.0-rc1-Linux-X64/bin/clang --version | head -n 1 | awk '{print $4}')
          
          # Modify anykernel.sh using sed with '@' as delimiter
          echo "Modifying anykernel.sh with kernel details..."
          sed -i '@s@kernel.string=.*@kernel.string=\" Lineage Kernel \"@g' anykernel.sh
          sed -i "@s@kernel.compiler=.*@kernel.compiler=$LLVM_VERSION@g" anykernel.sh
          sed -i '@s@kernel.version=.*@kernel.version=4.14.336@g' anykernel.sh
          
          echo "✅ Done: Flashable zip prepared!"

      - name: 📦 Creating Flashable Zip
        run: |
          cat << "EOF"
             /\_/\
            ( ^o^ )
             > ^ <
          EOF
          echo "✨ Starting: Zipping AnyKernel3 directory into a flashable zip..."
          cd AnyKernel3
          # Create the flashable zip, excluding the .git directory
          zip -r9 LineageOS-Kernel-curtana-${{ github.sha }}.zip * -x .git
          # Move the created zip to the root of the workspace for easy artifact upload
          mv LineageOS-Kernel-curtana-${{ github.sha }}.zip ../
          echo "✅ Done: Flashable zip created!"

      - name: ⬆️ Uploading Flashable Zip
        uses: actions/upload-artifact@v4
        with:
          name: LineageOS-Kernel-curtana
          path: LineageOS-Kernel-curtana-${{ github.sha }}.zip
          retention-days: 7 # Keep the artifact for 7 days
          if-no-files-found: error # Fail the workflow if the zip is not found
          overwrite: true # Overwrite if an artifact with the same name exists
          compression-level: 9 # Max compression for smaller file size
        env:
          # This environment variable is just for the echo message, not used by the action itself
          ZIP_NAME: LineageOS-Kernel-curtana-${{ github.sha }}.zip
        run: |
          cat << "EOF"
             /\_/\
            ( =^w^= )
             > ^ <
          EOF
          echo "✨ Starting: Uploading the compiled kernel zip as an artifact..."
          echo "🚀 Your flashable zip: ${{ env.ZIP_NAME }}"
          echo "✅ Done: Flashable zip uploaded successfully! You can find it in the 'Artifacts' section of this workflow run."
