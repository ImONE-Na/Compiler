name: üèóÔ∏è Lineage Kernel Compilation

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: üèóÔ∏è Kernel Building ...
    runs-on: ubuntu-latest

    steps:
      - name: üêæ Welcome Message
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Starting the LineageOS Kernel Build."

      - name: ‚¨áÔ∏è Checking out repository
        uses: actions/checkout@v4

      - name: üóÑÔ∏è Caching build dependencies
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}
          max-size: 5G

      - name: üîß Installing Build Dependencies
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          export DEBIAN_FRONTEND=noninteractive # Set non-interactive frontend for apt
          sudo dpkg --add-architecture i386
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            build-essential git curl wget ccache libsepol-dev device-tree-compiler \
            ninja-build crossbuild-essential-arm64 crossbuild-essential-armhf \
            libncurses5-dev libssl-dev libelf-dev bc rsync \
            libstdc++6:i386 libgcc1:i386 zlib1g:i386 libncurses6:i386
          echo "Dependencies installed."

      - name: üõ†Ô∏è Downloading LLVM Clang Toolchain
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Downloading LLVM Clang..."
          # Note: This is an RC (Release Candidate) version. For production, consider a stable release.
          curl -LSs "https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.0-rc1/LLVM-21.1.0-rc1-Linux-X64.tar.xz" -o llvm.tar.xz
          mkdir llvm
          tar -xf llvm.tar.xz -C llvm --strip-components=1
          rm llvm.tar.xz
          echo "LLVM Clang downloaded and extracted."

      - name: ‚öôÔ∏è Setting Up Build Environment
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Setting Environment Variables..."
          echo "export KBUILD_BUILD_USER=\"MINHAZ\"" >> $GITHUB_ENV
          echo "export KBUILD_BUILD_HOST=\"POTATO\"" >> $GITHUB_ENV
          echo "export LLVM_HOME=\"${{ github.workspace }}/llvm\"" >> $GITHUB_ENV
          echo "export PATH=\"${{ github.workspace }}/llvm/bin:$PATH\"" >> $GITHUB_ENV
          echo "export ARCH=arm64" >> $GITHUB_ENV
          echo "export SUBARCH=arm64" >> $GITHUB_ENV
          echo "export CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "export CROSS_COMPILE_ARM32=arm-linux-gnueabihf-" >> $GITHUB_ENV
          echo "export CC=\"ccache clang\"" >> $GITHUB_ENV
          echo "export CXX=\"ccache clang++\"" >> $GITHUB_ENV
          echo "export LLVM=1" >> $GITHUB_ENV
          echo "export LLVM_IAS=1" >> $GITHUB_ENV
          echo "Environment variables set."

      - name: üå≤ Cloning Kernel Source
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Cloning the kernel source..."
          git clone --depth=1 https://github.com/xiaomi-sm6250-devs/android_kernel_xiaomi_sm6250 -b lineage-22.2 kernel
          echo "Kernel source cloned."

      - name: üßº Cleaning Kernel Source
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Cleaning Source Tree..."
          cd kernel
          make O=out mrproper
          make O=out clean
          echo "Kernel source tree cleaned."

      - name: üìù Configuring Kernel
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Configuring the Kernel..."
          cd kernel
          make O=out vendor/xiaomi/miatoll_defconfig
          echo "Kernel configuration set for miatoll."

      - name: üî• Compiling The Kernel
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Starting Compilation..."
          cd kernel
          make O=out -j$(nproc --all)
          echo "Kernel compilation finished."

      - name: üéÅ Cloning AnyKernel3
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Cloning AnyKernel3..."
          git clone --depth=1 https://github.com/ImONE-Na/AnyKernel3 -b master anykernel
          echo "AnyKernel3 repository cloned."

      - name: üì¶ Packaging Flashable Zip
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Packaging the Final Zip..."
          cd anykernel
          # Copy kernel artifacts
          # For miatoll, Image.gz-dtb is the common output for combined kernel+dtb
          cp ../kernel/out/arch/arm64/boot/Image.gz-dtb .
          # Copy dtb.img and dtbo.img if they are generated separately and needed by AnyKernel3
          # Note: If Image.gz-dtb already contains the DTB, dtb.img might be redundant.
          cp ../kernel/out/arch/arm64/boot/dtb.img . || true
          cp ../kernel/out/arch/arm64/boot/dtbo.img . || true
          # Copy modules
          find ../kernel/out -name "*.ko" -exec cp {} modules/vendor/lib/modules/ \;

          # Get compiler version
          COMPILER_VERSION=$(clang --version | head -n 1)

          # Update anykernel.sh
          sed -i "s@kernel.string=.*@kernel.string=\"Lineage Kernel by MINHAZ\"@" anykernel.sh
          sed -i "s@kernel.compiler=.*@kernel.compiler=\"${COMPILER_VERSION}\"@" anykernel.sh
          sed -i "s@kernel.version=.*@kernel.version=4.14.336@" anykernel.sh
          echo "anykernel.sh updated."

          # Zip it up!
          zip -r9 Lineage-Kernel-curtana-$(date +%Y%m%d).zip * -x .git*
          echo "Flashable zip created successfully."

      - name: üì§ Uploading Kernel Zip
        uses: actions/upload-artifact@v4
        with:
          name: Lineage-Kernel-curtana
          path: anykernel/Lineage-Kernel-curtana-*.zip
