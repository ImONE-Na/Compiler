name: 🏗️ Lineage Kernel Compilation 🎉

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: 🏗️ Kernel Building ...

    steps:
      # Step 1: Display ASCII Art for Workflow Start
      - name: 🎨 Display Workflow Start Art
        run: |
          echo "🚀 Starting Lineage Kernel Compilation! 🚀"
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Meow! Let's compile that kernel! 😺
          EOF

      # Step 2: Install Dependencies
      - name: 🛠️ Install Dependencies
        run: |
          echo "📦 Installing build dependencies..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Installing dependencies... 🛠️
          EOF
          # Enable 32-bit architecture support for arm32 dependencies
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y build-essential device-tree-compiler ninja-build \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf libsepol-dev \
            lib32z1-dev lib32ncurses-dev lib32gcc-11-dev \
            bc bison flex libssl-dev python3 zip curl
          echo "✅ Dependencies installed successfully!"

      # Step 3: Setup ccache
      - name: ⚡ Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 5G
        run: |
          echo "⚡ Setting up ccache for faster compilation..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Caching like a pro! ⚡
          EOF

      # Step 4: Download LLVM Clang
      - name: 📥 Download LLVM Clang
        run: |
          echo "📥 Downloading LLVM Clang 21.1.0-rc1..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Fetching LLVM Clang... 📥
          EOF
          curl -LSs https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.0-rc1/LLVM-21.1.0-rc1-Linux-X64.tar.xz -o llvm.tar.xz
          tar -xvf llvm.tar.xz
          mv LLVM-21.1.0-rc1-Linux-X64 llvm
          echo "✅ LLVM Clang downloaded and extracted!"

      # Step 5: Set Environment Variables
      - name: 🌍 Set Environment Variables
        run: |
          echo "🌍 Configuring environment variables..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Setting up the environment... 🌍
          EOF
          echo "PATH=$(pwd)/llvm/bin:$PATH" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM32=arm-linux-gnueabihf-" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=MINHAZ" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=POTATO" >> $GITHUB_ENV
          echo "✅ Environment variables set!"

      # Step 6: Verify Toolchain Setup
      - name: 🔍 Verify Toolchain Setup
        run: |
          echo "🔍 Verifying toolchain setup..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Checking the toolchain... 🔍
          EOF
          clang --version
          aarch64-linux-gnu-gcc --version
          arm-linux-gnueabihf-gcc --version
          ccache --version
          echo "✅ Toolchain verified!"

      # Step 7: Checkout Kernel Source
      - name: 📚 Checkout Kernel Source
        run: |
          echo "📚 Cloning kernel source..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Fetching kernel source... 📚
          EOF
          git clone --depth 1 https://github.com/xiaomi-sm6250-devs/android_kernel_xiaomi_sm6250 -b lineage-22.2 kernel
          echo "✅ Kernel source cloned!"

      # Step 8: Clean Kernel Source
      - name: 🧹 Clean Kernel Source
        run: |
          echo "🧹 Cleaning kernel source..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Cleaning up with mrproper... 🧹
          EOF
          cd kernel
          make mrproper
          make clean
          echo "✅ Kernel source cleaned!"

      # Step 9: Generate Defconfig
      - name: ⚙️ Generate Defconfig
        run: |
          echo "⚙️ Generating defconfig..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Setting up defconfig... ⚙️
          EOF
          cd kernel
          make O=out vendor/xiaomi/miatoll_defconfig
          echo "✅ Defconfig generated!"

      # Step 10: Compile Kernel
      - name: 🔥 Compile Kernel
        run: |
          echo "🔥 Compiling kernel..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Building the kernel... 🔥
          EOF
          cd kernel
          make O=out \
            ARCH=arm64 \
            SUBARCH=arm64 \
            CC="ccache clang" \
            CXX="ccache clang++" \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabihf- \
            -j$(nproc)
          echo "✅ Kernel compiled successfully!"

      # Step 11: Checkout AnyKernel3
      - name: 📦 Checkout AnyKernel3
        run: |
          echo "📦 Cloning AnyKernel3..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Fetching AnyKernel3... 📦
          EOF
          git clone --depth 1 https://github.com/ImONE-Na/AnyKernel3 -b master AnyKernel3
          echo "✅ AnyKernel3 cloned!"

      # Step 12: Prepare AnyKernel3
      - name: 🛠️ Prepare AnyKernel3
        run: |
          echo "🛠️ Preparing AnyKernel3..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Setting up AnyKernel3... 🛠️
          EOF
          cd AnyKernel3
          # Copy kernel image and other files
          cp ../kernel/out/arch/arm64/boot/Image.gz anykernel3/
          cp ../kernel/out/arch/arm64/boot/dtbo.img anykernel3/
          cp ../kernel/out/arch/arm64/boot/dtb.img anykernel3/
          find ../kernel/out -name '*.ko' -exec cp {} anykernel3/modules/system/lib/modules/ \;
          # Update anykernel.sh
          sed -i 's@kernel.string=.*@kernel.string=Lineage Kernel@' anykernel3/anykernel.sh
          sed -i 's@kernel.compiler=.*@kernel.compiler=LLVM Clang 21.1.0-rc1@' anykernel3/anykernel.sh
          sed -i 's@kernel.version=.*@kernel.version=4.14.336@' anykernel3/anykernel.sh
          echo "✅ AnyKernel3 prepared!"

      # Step 13: Create Flashable ZIP
      - name: 📦 Create Flashable ZIP
        run: |
          echo "📦 Creating flashable ZIP..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Zipping up the kernel... 📦
          EOF
          cd AnyKernel3
          zip -r9 LineageKernel-Curtana.zip .
          echo "✅ Flashable ZIP created!"

      # Step 14: Upload Artifact
      - name: 📤 Upload Flashable ZIP
        uses: actions/upload-artifact@v4
        with:
          name: LineageKernel-Curtana
          path: AnyKernel3/LineageKernel-Curtana.zip
        run: |
          echo "📤 Uploading flashable ZIP..."
          cat << EOF
          /_/\  
         ( o.o ) 
          > ^ <
          Uploading the kernel ZIP... 📤
          EOF
          echo "✅ Artifact uploaded!"
