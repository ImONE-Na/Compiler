name: Build Curtana Lineage Kernel

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Kernel Source
      shell: bash
      run: |
        echo "--> Checking out kernel source..."
        git clone --depth=1 https://github.com/xiaomi-sm6250-devs/android_kernel_xiaomi_sm6250.git -b lineage-22.2 kernel
        echo "Kernel source checkout complete."

    - name: Checkout AnyKernel3
      shell: bash
      run: |
        echo "--> Checking out AnyKernel3..."
        git clone --depth=1 https://github.com/ImONE-Na/AnyKernel3.git -b master AnyKernel3
        echo "AnyKernel3 checkout complete."

    - name: Set up Build Environment
      shell: bash
      run: |
        echo "--> Setting up build environment..."
        echo "Installing essential build dependencies..."
        sudo apt update
        sudo apt install -y build-essential device-tree-compiler ninja-build libsepol1-dev flex bison libssl-dev libelf-dev bc cpio git python3-pip

        echo "Installing GNU ARM toolchains..."
        sudo apt install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

        echo "Downloading LLVM toolchain..."
        curl -LSs https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.0-rc1/LLVM-21.1.0-rc1-Linux-X64.tar.xz -o llvm.tar.xz
        echo "Extracting LLVM toolchain..."
        mkdir llvm-toolchain
        tar -xf llvm.tar.xz -C llvm-toolchain --strip-components=1
        
        echo "Setting LLVM environment variables..."
        export PATH="$GITHUB_WORKSPACE/llvm-toolchain/bin:$PATH"
        echo "LLVM_TOOLCHAIN_PATH=$GITHUB_WORKSPACE/llvm-toolchain" >> $GITHUB_ENV
        echo "PATH=$GITHUB_WORKSPACE/llvm-toolchain/bin:$PATH" >> $GITHUB_ENV # Ensure LLVM bin is in PATH for subsequent steps
        echo "Clang version:"
        clang --version
        echo "LLVM setup complete."
        
        echo "Verifying all necessary tools are in PATH and working..."
        which make && echo "make is installed." || { echo "Error: make not found!"; exit 1; }
        which dtc && echo "dtc is installed." || { echo "Error: dtc not found!"; exit 1; }
        which ninja && echo "ninja is installed." || { echo "Error: ninja not found!"; exit 1; }
        which arm-linux-gnueabihf-gcc && echo "arm-linux-gnueabihf-gcc is installed." || { echo "Error: arm-linux-gnueabihf-gcc not found!"; exit 1; }
        which aarch64-linux-gnu-gcc && echo "aarch64-linux-gnu-gcc is installed." || { echo "Error: aarch64-linux-gnu-gcc not found!"; exit 1; }
        which clang && echo "clang is installed." || { echo "Error: clang not found!"; exit 1; }
        
        echo "Environment setup complete."

    - name: Initialize ccache
      # This step uses the ccache action to restore/save the cache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}
        max-size: 5G

    - name: Configure ccache Environment Variables
      # This step sets environment variables for ccache for subsequent compilation steps
      shell: bash
      run: |
        echo "--> Configuring ccache environment variables..."
        # Ensure ccache is in PATH from the previous setup step if not already
        export CCACHE_EXEC=$(which ccache)
        if [ -z "$CCACHE_EXEC" ]; then
          echo "Error: ccache executable not found in PATH."
          exit 1
        fi
        echo "CCACHE_EXEC=$CCACHE_EXEC" >> $GITHUB_ENV
        echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=5G" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
        echo "CCACHE_NLEVELS=2" >> $GITHUB_ENV
        echo "CCACHE_SLOPPINESS=time_macros,file_macro,system_headers" >> $GITHUB_ENV
        ccache -s
        echo "ccache environment variables set."
        
    - name: Configure Kernel
      shell: bash
      working-directory: kernel
      run: |
        echo "--> Configuring kernel..."
        make O=out ARCH=arm64 SUBARCH=arm64 vendor/xiaomi/miatoll_defconfig
        echo "Kernel configuration complete."

    - name: Compile Kernel
      shell: bash
      working-directory: kernel
      env:
        ARCH: arm64
        SUBARCH: arm64
        CC: "ccache clang"
        CXX: "ccache clang++"
        # Set CROSS_COMPILE and CROSS_COMPILE_ARM32 to point to GNU toolchains
        CROSS_COMPILE: aarch64-linux-gnu-
        CROSS_COMPILE_ARM32: arm-linux-gnueabihf-
        # LLVM-specific variables
        CLANG_TRIPLE: aarch64-linux-gnu-
        LD: ld.lld
        LLVM_AR: llvm-ar
        LLVM_NM: llvm-nm
        LLVM_OBJCOPY: llvm-objcopy
        LLVM_OBJDUMP: llvm-objdump
        LLVM_STRIP: llvm-strip
        PATH: ${{ env.LLVM_TOOLCHAIN_PATH }}/bin:${{ env.PATH }} # Ensure LLVM is in PATH for compilation
      run: |
        echo "--> Compiling kernel..."
        make -j$(nproc) O=out
        echo "Kernel compilation complete."
        echo "Listing contents of out/arch/arm64/boot and out/modules for verification:"
        ls -la out/arch/arm64/boot/
        ls -la out/modules/

    - name: Package Kernel with AnyKernel3
      shell: bash
      run: |
        echo "--> Packaging kernel with AnyKernel3..."
        echo "Copying Image.gz to AnyKernel3 root..."
        cp kernel/out/arch/arm64/boot/Image.gz AnyKernel3/
        echo "Copying dtbo.img to AnyKernel3 root..."
        cp kernel/out/arch/arm64/boot/dtbo.img AnyKernel3/
        echo "Copying dtb.img to AnyKernel3 root..."
        cp kernel/out/arch/arm64/boot/dtb.img AnyKernel3/
        
        echo "Creating modules directory in AnyKernel3 if it doesn't exist..."
        mkdir -p AnyKernel3/modules/system/lib/modules
        
        echo "Copying kernel modules to AnyKernel3/modules/system/lib/modules..."
        find kernel/out/modules -name "*.ko" -exec cp {} AnyKernel3/modules/system/lib/modules/ \;
        
        echo "Generating flashable zip..."
        cd AnyKernel3
        zip -r9 ${{ github.workspace }}/Curtana-LineageOS-Kernel-${{ github.run_number }}.zip * -x .git README.md
        cd ..
        echo "Flashable zip created."

    - name: Upload Kernel as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Curtana-LineageOS-Kernel
        path: Curtana-LineageOS-Kernel-*.zip
        retention-days: 7
      run: |
        echo "--> Uploading kernel artifact..."
        echo "Kernel artifact uploaded successfully."
