name: 'Lineage kernel Compilation 🐧'

#
# 🚀 Workflow Triggers
#
# This workflow will automatically start when you push new commits to the 'main' branch.
#
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub Actions tab

jobs:
  build:
    name: '🏗️ Kernel Building ...'
    runs-on: ubuntu-latest

    steps:
      # ----------------------------------------------------------------------------------------
      # 🛠️ 1. Initial Setup & Checkout
      # ----------------------------------------------------------------------------------------
      - name: '📦 Initializing The Build Environment'
        uses: actions/checkout@v4

      - name: '🔧 Installing Dependencies'
        run: |
          cat << "EOF"
            ██████╗ ██╗███╗    ██╗████████╗ █████╗ ██╗      ██╗    ██╗██╗    ██╗███████╗
            ██╔══██╗██║████╗  ██║╚══██╔══╝██╔══██╗██║      ██║    ██║██║    ██║██╔════╝
            ██████╔╝██║██╔██╗ ██║  ██║  ███████║██║      ██║    ██║██║    ██║█████╗
            ██╔══██╗██║██║╚██╗██║  ██║  ██╔══██║██║      ╚██╗ ██╔╝██║    ██║██╔══╝
            ██║  ██║██║██║ ╚████║  ██║  ██║  ██║███████╗ ╚████╔╝ ╚██████╔╝███████╗
            ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝  ╚═╝  ╚═╝  ╚═╝╚══════╝  ╚══╝  ╚═════╝ ╚══════╝
          EOF
          sudo dpkg --add-architecture i386 # Add i386 architecture
          sudo apt-get update
          # Install software-properties-common to add repositories if needed, though usually not for standard toolchains
          sudo apt-get install -y software-properties-common
          # Add the toolchain test repository for newer GCC versions if they are not in main
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y bc build-essential ccache curl device-tree-compiler \
                                   flex git gnupg gperf imagemagick \
                                   libncurses5-dev:i386 libreadline-dev:i386 zlib1g-dev:i386 libelf-dev \
                                   liblz4-tool libncurses5-dev libsdl1.2-dev libsepol-dev libssl-dev \
                                   libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools \
                                   xsltproc zip zlib1g-dev ninja-build \
                                   gcc-13-aarch64-linux-gnu gcc-13-arm-linux-gnueabi \
                                   binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi

      # ----------------------------------------------------------------------------------------
      # ⚡ 2. Ccache for Faster Builds
      # ----------------------------------------------------------------------------------------
      - name: '⚡ Setting Up Build Cache'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}
          max-size: 5G # Set cache size to 5GB

      # ----------------------------------------------------------------------------------------
      # 📥 3. Cloning All Necessary Repositories
      # ----------------------------------------------------------------------------------------
      - name: '📥 Cloning Kernel Source'
        run: |
          cat << "EOF"
            _  __ _   _    _          _     
           | |/ /(_) | |  | |   ___   ___ | | _____ 
           | ' /  _  | |  | | / _ \ / __|| |/ / __|
           |  <  | | | |/\| | / _ \ / __|| |/ / __|
           | . \ | | \  /\  /|  __/| (__ |   <\__ "
           |_|\_\|_|  \/  \/  \___| \___||_|\_\___/
          EOF
          git clone --depth=1 https://github.com/xiaomi-sm6250-devs/android_kernel_xiaomi_sm6250 -b lineage-22.2 $GITHUB_WORKSPACE/kernel

      - name: '📥 Cloning AOSP Clang Compiler'
        run: |
          cat << "EOF"
                /\    ____   ___   ____    _   _   ____    _   
               /  \  / __ \ / _ \ / __ \  | \ | | / __ \  / \   
              / /\ \ | | | || | | || | | | |  \| || |  | |/ _ \  
             / ____ \| | | || | | || | | | | .  || |  | |/ ___ \ 
            /_/    \\_\ \_\\ \_\\ \_\\ | |\  |\_\ \_\\_\\ 
          /_/    \\____/ \___/ \____/ |_| \_| \____//_/    \\_\
          EOF
          # Clone the parent repository and then move the specific clang version
          git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 -b main $GITHUB_WORKSPACE/clang_temp
          mkdir -p $GITHUB_WORKSPACE/clang
          mv $GITHUB_WORKSPACE/clang_temp/clang-r547379 $GITHUB_WORKSPACE/clang/bin

      - name: '📥 Cloning AnyKernel3'
        run: |
          cat << "EOF"
                _   _ _   _ _ _ ____ ____ _ _ 
               / \  / \/ \ / \/ \/ \/  __\/  _ \/ \/ \\
               | |  | || || || || |||  \/|| / \|| || |
               | |_/\| || || || || |||    || \_/|| || |
               \____/\_/\_/\_/\_/\_/\_/\_/ \____/\_/\_/"
          EOF
          git clone --depth=1 https://github.com/ImONE-Na/AnyKernel3 -b master $GITHUB_WORKSPACE/AnyKernel3

      # ----------------------------------------------------------------------------------------
      # ⚙️ 4. Setting Up The Build Environment
      # ----------------------------------------------------------------------------------------
      - name: '⚙️ Setting Up Environment Variables'
        run: |
          cat << "EOF"
            ______    __  __    __  __    ______    ______    ______      ______    __    __ 
           /\ ___\ /\ \_\ \   /\ \/\ \   /\ __ \   /\__ _\ /\ __ \   /\ == \   /\ '-./  \"
           \ \ __\ \ \  __ \  \ \ \_\ \  \ \ \/\ \  \/_/\ \/ \ \ \/\ \  \ \ __<   \ \ \-./\ \ 
            \ \_____\\ \_\ \_\  \ \_____\  \ \_____\    \ \_\  \ \_____\  \ \_\ \_\  \ \_\ \ \_\"
             \/_____/ \/_/\/_/   \/_____/   \/_____/     \/_/   \/_____/   \/_/ /_/   \/_/  \/_/"
          EOF
          # Set build user and host
          echo "KBUILD_BUILD_USER=MINHAZ" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=POTATO" >> $GITHUB_ENV

          # Set Clang path
          echo "CLANG_PATH=$GITHUB_WORKSPACE/clang/bin" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/clang/bin:$PATH" >> $GITHUB_ENV

          # Set cross compile variables
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM32=arm-linux-gnueabi-" >> $GITHUB_ENV
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV

      # ----------------------------------------------------------------------------------------
      # 🧹 5. Cleaning The Kernel Source Tree
      # ----------------------------------------------------------------------------------------
      - name: '🧹 Cleaning Kernel Source'
        run: |
          cat << "EOF"
              _____ _     _____          _     
            / ____| |   / ____|        (_)     
           | |    | |  | (___   ___ _ __ _ _ __  
           | |    | |   \___ \ / __| '__| | '_ \ 
           | |____| |________) | (__| |  | | |_) |
            \_____|______|_____/ \___|_|  |_| .__/ 
                                           | |   
                                           |_|   
          EOF
          cd $GITHUB_WORKSPACE/kernel
          make mrproper
          make clean

      # ----------------------------------------------------------------------------------------
      # 🛠️ 6. Compiling The Kernel
      # ----------------------------------------------------------------------------------------
      - name: '🛠️ Compiling The Kernel'
        run: |
          cat << "EOF"
              _____                      _ _       
            / ____|                    | (_)       
           | |   ___ _ __ ___ _ __  _   _| |_ ___ _ __ 
           | |  / _ \| '_ \` _ \| '_ \| | | | | / __| '__|"
           | |___| (_) | | | | | | |_) | |_| | | \__ \ |   
            \_____\___/|_| |_| |_| .__/ \__,_|_|_|___/_|   
                                 | |                     
                                 |_|                     
          EOF
          cd $GITHUB_WORKSPACE/kernel
          # Configure the kernel
          make O=out vendor/xiaomi/miatoll_defconfig

          # Start the compilation
          make -j$(nproc --all) O=out \
                CC="ccache clang" \
                CXX="ccache clang++" \
                CLANG_TRIPLE="aarch64-linux-gnu-" \
                CROSS_COMPILE=${{ env.CROSS_COMPILE }} \
                CROSS_COMPILE_ARM32=${{ env.CROSS_COMPILE_ARM32 }} \
                ARCH=${{ env.ARCH }} \
                SUBARCH=${{ env.SUBARCH }}

      # ----------------------------------------------------------------------------------------
      # 📦 7. Packaging into a Flashable Zip
      # ----------------------------------------------------------------------------------------
      - name: '📦 Packaging Flashable Zip'
        run: |
          cat << "EOF"
            ____           _              ______ _ _     
           |  _ \         | |            | ____(_) |     
           | |_) | __ _ ___| | _____ _ __ ___ | |__   _| | ___ 
           |  _ < / _\` |/ __| |/ / _ \ '__/ __| |  __| | | |/ _ \
           | |_) | (_| | (__|   <  __/ |  \__ \ | |    | | |  __/
           |____/ \__,_|\___|_|\_\___|_|  |___/ |_|    |_|_|\___|"
          EOF
          # Copy kernel images and modules
          cp $GITHUB_WORKSPACE/kernel/out/arch/arm64/boot/Image.gz $GITHUB_WORKSPACE/AnyKernel3/
          cp $GITHUB_WORKSPACE/kernel/out/arch/arm64/boot/dtb.img $GITHUB_WORKSPACE/AnyKernel3/
          cp $GITHUB_WORKSPACE/kernel/out/arch/arm64/boot/dtbo.img $GITHUB_WORKSPACE/AnyKernel3/
          find $GITHUB_WORKSPACE/kernel/out/ -name "*.ko" -exec cp {} $GITHUB_WORKSPACE/AnyKernel3/modules/ \;

          # Modify AnyKernel.sh
          cd $GITHUB_WORKSPACE/AnyKernel3
          CLANG_VERSION=$(${{ env.CLANG_PATH }}/clang --version | head -n 1)
          sed -i 's@kernel.string=.*@kernel.string="Lineage Kernel by MINHAZ"@' anykernel.sh
          sed -i "s@kernel.compiler=.*@kernel.compiler=\"${CLANG_VERSION}\"@" anykernel.sh
          sed -i 's@kernel.version=.*@kernel.version=4.14.336@' anykernel.sh

          # Create the zip
          zip -r9 Lineage-Kernel-curtana.zip * -x .git README.md *placeholder

      # ----------------------------------------------------------------------------------------
      # 📤 8. Uploading The Artifact
      # ----------------------------------------------------------------------------------------
      - name: '📤 Uploading Kernel Zip'
        uses: actions/upload-artifact@v4
        with:
          name: Lineage-Kernel-curtana
          path: $GITHUB_WORKSPACE/AnyKernel3/Lineage-Kernel-curtana.zip
